generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/@generated/prisma-nestjs-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_WITH_OPTIONS")
}

model ScryfallSet {
  id            String         @id @default(uuid()) @db.Uuid
  code          String         @unique
  mtgoCode      String?        @unique
  arenaCode     String?        @unique
  tcgPlayerId   Int?
  name          String
  setType       String
  releasedAt    DateTime?
  blockCode     String?
  block         String?
  parentSetCode String?
  cardCount     Int
  printedSize   Int?
  isDigital     Boolean
  isFoilOnly    Boolean
  isNonFoilOnly Boolean
  scryfallUri   String
  uri           String
  iconSvgUri    String
  searchUri     String
  /// @HideField({ output: false, input: true })
  createdAt     DateTime       @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime       @default(now()) @updatedAt
  cards         ScryfallCard[]

  @@index([code])
}

model ScryfallRelatedCard {
  id          String       @id @default(uuid()) @db.Uuid
  referenceId String       @db.Uuid
  cardId      String       @db.Uuid
  component   String
  name        String
  typeLine    String
  uri         String
  /// @HideField({ output: false, input: true })
  createdAt   DateTime     @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt   DateTime     @default(now()) @updatedAt
  card        ScryfallCard @relation("RelatedCard_card", fields: [cardId], references: [id], onDelete: Cascade)
  reference   ScryfallCard @relation("RelatedCard_reference", fields: [referenceId], references: [id], onDelete: Cascade)
}

model ScryfallCardFace {
  id              String       @id @default(uuid()) @db.Uuid
  cardId          String       @db.Uuid
  artist          String?
  cmc             Float?       @db.Real
  colorIndicator  String[]
  colors          String[]
  flavorText      String?
  illustrationId  String?      @db.Uuid
  imageUris       Json?
  layout          String?
  loyalty         String?
  manaCost        String?
  name            String
  oracleId        String?      @db.Uuid
  oracleText      String?
  power           String?
  printedName     String?
  printedText     String?
  printedTypeLine String?
  toughness       String?
  typeLine        String?
  watermark       String?
  /// @HideField({ output: false, input: true })
  createdAt       DateTime     @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt       DateTime     @default(now()) @updatedAt
  card            ScryfallCard @relation(fields: [cardId], references: [id], onDelete: SetNull)
}

model ScryfallCard {
  id                String                @id @default(uuid()) @db.Uuid
  arenaId           Int?
  lang              String
  mtgoId            Int?
  mtgoFoilId        Int?
  multiverseIds     Int[]
  tcgplayerId       Int?
  tcgplayerEtchedId Int?
  cardmarketId      Int?
  oracleId          String?
  printsSearchUri   String
  rulingUri         String?
  scryfallUri       String
  uri               String
  allParts          Json[]
  cardFacesRaw      Json[]
  cmc               Float?                @db.Real
  colorIdentity     String[]
  colorIndicator    String[]
  colors            String[]
  edhrecRank        Int?
  handModifier      String?
  keywords          String[]
  layout            String
  legalities        Json
  lifeModifier      String?
  loyalty           String?
  manaCost          String?
  name              String
  oracleText        String?
  oversized         Boolean
  power             String?
  producedMana      String[]
  reserved          Boolean
  toughness         String?
  typeLine          String?
  artist            String?
  booster           Boolean
  borderColor       String
  cardBackId        String?
  collectorNumber   String
  contentWarning    Boolean?
  digital           Boolean
  finishes          String[]
  flavorName        String?
  frameEffects      String[]
  frame             String
  fullArt           Boolean
  games             String[]
  highresImage      Boolean
  illustrationId    String?
  imageStatus       String
  imageUris         Json?
  prices            Json
  printedName       String?
  printedText       String?
  printedTypeLine   String?
  promo             Boolean
  promoTypes        String[]
  purchaseUris      Json?
  rarity            String
  relatedUris       Json
  releasedAt        DateTime
  reprint           Boolean
  scryfallSetUri    String
  setCode           String
  setName           String
  setSearchUri      String
  setType           String
  setUri            String
  storySpotlight    Boolean
  textless          Boolean
  variation         Boolean
  varationOf        String?
  securityStamp     String?
  watermark         String?
  setId             String                @db.Uuid
  /// @HideField({ output: false, input: true })
  createdAt         DateTime              @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt         DateTime              @default(now()) @updatedAt
  set               ScryfallSet           @relation(fields: [setId], references: [id], onDelete: Cascade)
  card              Card?
  cardFaces         ScryfallCardFace[]
  scryfallPrice     ScryfallPrice[]
  relatedTo         ScryfallRelatedCard[] @relation("RelatedCard_card")
  referencedBy      ScryfallRelatedCard[] @relation("RelatedCard_reference")
}

model ScryfallPrice {
  date                 DateTime     @db.Date
  eur                  Float?       @db.Real
  tix                  Float?       @db.Real
  usd                  Float?       @db.Real
  eurFoil              Float?       @db.Real
  usdFoil              Float?       @db.Real
  usdEtched            Float?       @db.Real
  cardId               String       @db.Uuid
  /// @HideField({ output: false, input: true })
  createdAt            DateTime     @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt            DateTime     @default(now()) @updatedAt
  id                   String       @id @default(uuid()) @db.Uuid
  currentPriceOfCardId String?      @unique @db.Uuid
  card                 ScryfallCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  currentPriceOfCard   Card?        @relation(fields: [currentPriceOfCardId], references: [id])

  @@index([date, id])
  @@index([date])
}

model ScryfallCardName {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  /// @HideField({ output: false, input: true })
  createdAt DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt DateTime @default(now()) @updatedAt

  @@index([name])
}

model User {
  externalAuthId String       @unique
  email          String       @unique
  /// @HideField({ output: false, input: true })
  createdAt      DateTime     @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt      DateTime     @default(now()) @updatedAt
  id             String       @id @default(uuid()) @db.Uuid
  collections    Collection[]
  Tag            Tag[]

  @@index([email])
  @@index([externalAuthId])
}

model Card {
  id              String              @id @default(uuid()) @db.Uuid
  scryfallCardId  String              @unique @db.Uuid
  /// @HideField({ output: false, input: true })
  createdAt       DateTime            @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt       DateTime            @default(now()) @updatedAt
  isBorderless    Boolean             @default(false)
  isShowcase      Boolean             @default(false)
  canBeFoil       Boolean             @default(false)
  collectorNumber String?
  isPaper         Boolean             @default(false)
  name            String
  canBeEtched     Boolean             @default(false)
  canBeNonFoil    Boolean             @default(false)
  isExtendedArt   Boolean             @default(false)
  isRetro         Boolean             @default(false)
  scryfallCard    ScryfallCard        @relation(fields: [scryfallCardId], references: [id], onDelete: Cascade)
  collections     CardsInCollection[]
  currentPrice    ScryfallPrice?

  @@index([scryfallCardId])
}

model Collection {
  id        String              @id @default(uuid()) @db.Uuid
  name      String
  userId    String              @db.Uuid
  /// @HideField({ output: false, input: true })
  createdAt DateTime            @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt DateTime            @default(now()) @updatedAt
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards     CardsInCollection[]

  @@unique([userId, name])
  @@index([userId])
}

model CardsInCollection {
  cardId       String     @db.Uuid
  collectionId String     @db.Uuid
  count        Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  isEtched     Boolean    @default(false)
  isFoil       Boolean    @default(false)
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  card         Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  tags         Tag[]

  @@unique([cardId, collectionId, isFoil, isEtched])
}

model Tag {
  id        String              @id @default(uuid()) @db.Uuid
  name      String
  userId    String              @db.Uuid
  /// @HideField({ output: false, input: true })
  createdAt DateTime            @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt DateTime            @default(now()) @updatedAt
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards     CardsInCollection[]

  @@unique([userId, name])
  @@index([userId])
}
